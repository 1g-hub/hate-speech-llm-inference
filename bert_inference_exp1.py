# -*- coding: utf-8 -*-
"""bert_inference_Exp1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m2Lgx-68RPmaEuFiUMMHS4cktSq9yv6S
"""

!git lfs install

!git clone https://huggingface.co/datasets/hatexplain

!pip install datasets==3.6.0

from datasets import load_dataset

data = load_dataset("hatexplain")

# print train

print(data['train'])

# print annotators

print(data['train'].features['annotators'])

# print the annotators of few exemples

print(data['train'][0]['annotators'])
print(data['train'][1]['annotators'])
print(data['train'][2]['annotators'])

# print the post_tokens of few exemples

print(data['train'][0]['post_tokens'])
print(data['train'][1]['post_tokens'])
print(data['train'][2]['post_tokens'])

import pandas as pd

# print few example of the hatexplain training dataset in a table

train_df = data["train"]
train_df = train_df.to_pandas()
print(train_df.head())

print(data['train'][450]['post_tokens'])

from datasets import load_dataset

# Load the HateXplain dataset
dataset = load_dataset("hatexplain")

# Inspect the structure of the 'annotators' field
print(dataset['train']['annotators'][:5])

from datasets import load_dataset
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
import pandas as pd
from collections import Counter

# Load the HateXplain dataset
dataset = load_dataset("hatexplain")

# Extract the relevant fields
texts = [' '.join(item) for item in dataset['train']['post_tokens']]  # Combining tokens into a single text

# Extracting the most frequent label from annotators
def most_frequent_label(labels):
    count = Counter(labels)
    return count.most_common(1)[0][0]

labels = [most_frequent_label(item['label']) for item in dataset['train']['annotators']]

# Convert lists to a pandas DataFrame
df = pd.DataFrame({'text': texts, 'label': labels})

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], test_size=0.2, random_state=42)

# Convert text data to TF-IDF features
vectorizer = TfidfVectorizer(max_features=5000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Train a logistic regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train_tfidf, y_train)

# Predict on the test set
y_pred = model.predict(X_test_tfidf)

# Print the classification report
print(classification_report(y_test, y_pred, target_names=['hatespeech', 'normal', 'offensive']))

pip install accelerate -U

from datasets import load_dataset
from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments
from sklearn.model_selection import train_test_split
import pandas as pd
import torch
from collections import Counter

# Load the HateXplain dataset
dataset = load_dataset("hatexplain")

# Prepare the text and labels
texts = [' '.join(item) for item in dataset['train']['post_tokens']]
labels = [max(Counter(item['label']).items(), key=lambda x: x[1])[0] for item in dataset['train']['annotators']]
label_mapping = {0: 'hatespeech', 1: 'normal', 2: 'offensive'}

# Convert to DataFrame
df = pd.DataFrame({'text': texts, 'label': labels})

# Split the dataset and reset indices
train_texts, test_texts, train_labels, test_labels = train_test_split(df['text'], df['label'], test_size=0.2, random_state=42)
train_texts = train_texts.reset_index(drop=True)
test_texts = test_texts.reset_index(drop=True)
train_labels = train_labels.reset_index(drop=True)
test_labels = test_labels.reset_index(drop=True)

# Load the tokenizer
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

# Tokenize the dataset
train_encodings = tokenizer(train_texts.tolist(), truncation=True, padding=True, max_length=128)
test_encodings = tokenizer(test_texts.tolist(), truncation=True, padding=True, max_length=128)

# Convert to PyTorch tensors
class HateSpeechDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

train_dataset = HateSpeechDataset(train_encodings, train_labels)
test_dataset = HateSpeechDataset(test_encodings, test_labels)

# Load the model
model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=3)

# Define training arguments
training_args = TrainingArguments(
    output_dir='./results',
    num_train_epochs=3,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    warmup_steps=500,
    weight_decay=0.01,
    logging_dir='./logs',
    logging_steps=10,
)

# Define Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=test_dataset,
)

# Train the model
trainer.train()

# Evaluate the model
results = trainer.evaluate()
print(results)

from sklearn.metrics import classification_report

# Get predictions
predictions = trainer.predict(test_dataset)
preds = predictions.predictions.argmax(-1)

# Generate classification report
print(classification_report(test_labels, preds, target_names=label_mapping.values()))

import matplotlib.pyplot as plt
from sklearn.metrics import ConfusionMatrixDisplay, confusion_matrix

# Generate confusion matrix
cm = confusion_matrix(test_labels, preds)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=label_mapping.values())

# Plot confusion matrix
disp.plot(cmap=plt.cm.Blues)
plt.show()

import pandas as pd

# Assuming you have test_texts, test_labels, and preds
# Convert test data and predictions to a DataFrame for easy manipulation
test_data = pd.DataFrame({
    'text': test_texts,
    'true_label': test_labels,
    'predicted_label': preds
})

# Map numeric labels to string labels
label_mapping = {0: 'hatespeech', 1: 'normal', 2: 'offensive'}

# Function to get examples for each block in the confusion matrix
def print_examples_for_confusion_matrix(df, label_mapping):
    for true_label in range(3):
        for predicted_label in range(3):
            # Filter the DataFrame for the current block
            examples = df[(df['true_label'] == true_label) & (df['predicted_label'] == predicted_label)]

            # Print an example if it exists
            if not examples.empty:
                example_text = examples.iloc[0]['text']
                print(f"True Label: {label_mapping[true_label]}, Predicted Label: {label_mapping[predicted_label]}")
                print(f"Example: {example_text}")
                print("-" * 80)

# Print examples for each block of the confusion matrix
print_examples_for_confusion_matrix(test_data, label_mapping)

# Reload val set (works since you're on older datasets version)
val_set = load_dataset("hatexplain", split="validation")
subset = val_set.select(range(950, 1050))

# Prepare texts and labels
val_texts = [' '.join(p) for p in subset['post_tokens']]
val_labels = [max(Counter(a['label']).items(), key=lambda x: x[1])[0] for a in subset['annotators']]

# Tokenize
val_encodings = tokenizer(val_texts, truncation=True, padding=True, max_length=128)
val_dataset = HateSpeechDataset(val_encodings, val_labels)

# Evaluate
subset_results = trainer.evaluate(eval_dataset=val_dataset)
print("üîç Eval on val[950:1050]:", subset_results)

import numpy as np
from torch.nn.functional import softmax

model.eval()
preds = []

for i in range(len(val_dataset)):
    item = {k: v.unsqueeze(0).to(model.device) for k, v in val_dataset[i].items() if k != "labels"}
    with torch.no_grad():
        output = model(**item)
    probs = softmax(output.logits, dim=1)
    pred = torch.argmax(probs, dim=1).item()
    preds.append(pred)

# True labels
true_labels = val_labels

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt

# Label mapping
label_names = ['hatespeech', 'normal', 'offensive']

# Accuracy
acc = accuracy_score(true_labels, preds)
print(f"‚úÖ Accuracy: {acc:.4f}")

# Classification Report
print("\nüìä Classification Report:")
print(classification_report(true_labels, preds, target_names=label_names))

# Confusion Matrix
cm = confusion_matrix(true_labels, preds)

# Plot Confusion Matrix
plt.figure(figsize=(6,5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=label_names, yticklabels=label_names)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix (val[950:1050])")
plt.show()

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt

# Label mapping
label_names = ['hatespeech', 'normal', 'offensive']

# Accuracy
acc = accuracy_score(true_labels, preds)
print(f"‚úÖ Accuracy: {acc:.4f}")

# Classification Report
print("\nüìä Classification Report:")
print(classification_report(true_labels, preds, target_names=label_names))

# Confusion Matrix
cm = confusion_matrix(true_labels, preds)

# Plot Confusion Matrix
plt.figure(figsize=(6,5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=label_names, yticklabels=label_names)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix (100 samples)")
plt.show()